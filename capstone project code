#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <stdint.h>
#include <unistd.h>

/* Function pointer type for JIT compiled function */
typedef int (*jit_func_t)(int);

/* Allocate executable memory */
void* alloc_exec_mem(size_t size) {
    void* mem = mmap(NULL, size, PROT_EXEC | PROT_WRITE | PROT_READ, MAP_ANON | MAP_PRIVATE, -1, 0);
    if (mem == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }
    return mem;
}

/* Compile a function f(x) = x*x + x + 1 */
jit_func_t compile_function() {
    uint8_t machine_code[] = {
        0x55, // push rbp
        0x48, 0x89, 0xe5, // mov rbp,rsp
        0x89, 0x7d, 0xfc, // mov DWORD PTR [rbp-4],edi
        0x8b, 0x45, 0xfc, // mov eax,DWORD PTR [rbp-4]
        0x0f, 0xaf, 0x45, 0xfc, // imul eax,DWORD PTR [rbp-4]
        0x03, 0x45, 0xfc, // add eax,DWORD PTR [rbp-4]
        0x83, 0xc0, 0x01, // add eax,1
        0x5d, // pop rbp
        0xc3 // ret
    };

    size_t code_size = sizeof(machine_code);
    void* mem = alloc_exec_mem(code_size);
    memcpy(mem, machine_code, code_size);

    return (jit_func_t)mem;
}

int main() {
    jit_func_t jit_function = compile_function();

    /* Test function with values similar to your output */
    for (int i = 0; i <= 5; i++) {
        printf("f(%d) = %d\n", i, jit_function(i));
    }

    return 0;
}
